/* -------------------------------------------------------
                         ili9163.h

     Header Softwaremodul fuer ili9163 Graphic-LCD

     MCU   :  STM8S103F3
     Takt  :  interner Takt 16 MHz

     25.10.2016  R. Seelig
   ------------------------------------------------------ */
/* -----------------------------------------------------------------------------------
      Displays aus China werden haeufig mit unterschiedlichen
      Bezeichnungen der Pins ausgeliefert. Moegliche
      Pinzuordnungen sind:

      Controller STM32F030          Display
      --------------------------------------------------------------------------
         SPI-SCK  / PC5    ----    SCK / CLK    (clock)
         SPI-MOSI / PC6    ----    SDA / DIN    (data in display)
                                   CS  / CE     (chip select display) (auf Masse zu legen)
                    PC4    ----    A0  / D/C    (selector data or command write)
                    PC3    ----    Reset / RST  (reset)

   ------------------------------------------------------------------------------------ */

#ifndef in_ili9163
  #define in_ili9163

  #include "stm8s.h"
  #include "stm8_init.h"
  #include "stm8_gpio.h"
  #include "spi.h"

  // Auswahl des Displaycontrollers (ILI9163 und S6D02A1 haben dieselben Sequenzen)

  #define  ili9163                  0
  #define  ili9340                  0
  #define  st7735r                  0
  #define  s6d02a1                  0
  #define  ili9225                  1

  /*  ------------------------------------------------------------
                         Displayaufloesung
      ------------------------------------------------------------ */

  // fuer Berechnung Bildadressen. ACHTUNG: manche Chinadisplays behandeln 128x128 Displays
  // so, als haette es 160 Pixel in Y-Aufloesung.

  // In diesem Fall ist fuer _lcyofs  -32 anzgeben
  // (hat nur Effekt, wenn _yres   128 , im Hauptprogramm dann outmode= 3; damit das Bild
  // nicht af dem Kopf steht)

  #define tft128                  1                 // 1: Display ohne Offset (aelter)
                                                    // 2: Display mit Offset (neuer)


  #define _xres                   176
  #define _yres                   220

  #if (tft128 == 2)

    #define _lcyofs               -32               // manche Display sprechen das Display an
                                                    // als haette es 160 Pixel Y-Aufloesung
  #else
    #define _lcyofs               0
  #endif

  //-------------------------------------------------------------
  // Registerzuordnung der Adressierungsregister der
  // verschiedenen Displaycontroller
  //-------------------------------------------------------------


  #if  (ili9225 == 1)
    #define coladdr      0x20
    #define rowaddr      0x21
    #define writereg     0x22
  #else
    #define coladdr      0x2a
    #define rowaddr      0x2b
    #define writereg     0x2c
  #endif

/* -------------------------------------------------------------
                 Hardwareanbindung LCD Pins
   ------------------------------------------------------------- */

  #define LCD_PORT                PC_ODR
  #define LCD_CR1                 PC_CR1
  #define LCD_DDR                 PC_DDR
  #define LCD_RST_PIN             PC3
  #define LCD_DC_PIN              PC4

  /*  ------------------------------------------------------------
       soll innerhalb der fillrect - Funktion ein Fastfill mittels
       der Funktionen des Displays vorgenommen werden (hier
       funktioniert dann ein "Drehen" mittels outmode NICHT)
     ------------------------------------------------------------- */

  #define  fastfillmode             0

  /*  ------------------------------------------------------------
                         P R O T O T Y P E N
      ------------------------------------------------------------ */

  // ----------------- LCD - Benutzerfunktionen ---------------

  void lcd_init(void);                                                        // initialisiert Display
  void putpixel(int x, int y,uint16_t color);                                 // schreibt einen einzelnen Punkt auf das Display
  void clrscr();                                                              // loescht Display-Inhalt
  void fastxline(uint8_t x1, uint8_t y1, uint8_t x2, uint16_t color);         // zeichnet eine Linie in X-Achse
  void fillrect(int x1, int y1, int x2, int y2, uint16_t color);              // fuellt einen rechteckigen Bereich mit Farbe aus
  uint16_t rgbfromvalue(uint8_t r, uint8_t g, uint8_t b);                     // konvertiert einen 24 Bit RGB-Farbwert in einen 16 Bit Farbwert
  uint16_t rgbfromega(uint8_t entry);                                         // konvertiert einen Farbwert aus der EGA-Palette in einen 16 Bit Farbwert
  void gotoxy(unsigned char x, unsigned char y);                              // setzt den Textcursor fuer Textausgaben
  void lcd_putchar(unsigned char ch);                                         // setzt ein Zeichen auf das Display
  void lcd_putcharxy(int oldx, int oldy, unsigned char ch);                   // setzt ein Zeichen auf den GRAFIK-Bildschirm (Hintergrund unveraendert)
  void outtextxy(int x, int y, unsigned char *c);                             // gibt einen String auf dem Display aus
  void line(int x0, int y0, int x1, int y1, uint16_t color);                  // zeichnet eine Linie
  void rectangle(int x1, int y1, int x2, int y2, uint16_t color);             // zeichnet ein Rechteck
  void ellipse(int xm, int ym, int a, int b, uint16_t color );                // zeichnet eine Ellipse
  void fillellipse(int xm, int ym, int a, int b, uint16_t color );            // zeichnet eine ausgefuellte Ellipse
  void circle(int x, int y, int r, uint16_t color );                          // zeichnet einen Kreis
  void fillcircle(int x, int y, int r, uint16_t color );                      // zeichnet einen ausgefuellten Kreis
  void showimage(int ox, int oy, const unsigned char* const image, uint16_t fwert);     // zeichnet ein monochromes Bitmap
  void putstring(char *c);                                                    // schreibt einen Textstring auf das LCD

  // ---------------- Low-level Displayfunktionen -------------

  void set_ram_address (uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);  // setzt den zu beschreibenden Speicherbereich
  void setcol(int startcol);                    // setzt zu beschreibende Spalte
  void setpage(int startpage);                  // setzt zu beschreibende Reihe
  void setxypos(int x, int y);                  // setzt die zu beschreibende Koordinate im Display-Ram

  // --------------------- SPI-Funktionen ---------------------

  void wrcmd(uint8_t cmd);                      // schreibt einzelnes Kommandodatum (Registerzugriff)
  void wrdata(uint8_t data);                    // schreibt einzelnen Registerwert oder Ramwert
  void wrdata16(int data);                      // schreibt einen Integerwert

  /*  ------------------------------------------------------------
                      EGA - Farbzuweisungen
      ------------------------------------------------------------ */

  #define black                   0
  #define blue                    1
  #define green                   2
  #define cyan                    3
  #define red                     4
  #define magenta                 5
  #define brown                   6
  #define grey                    7
  #define darkgrey                8
  #define lightblue               9
  #define lightgreen              10
  #define lightcyan               11
  #define lightred                12
  #define lightmagenta            13
  #define yellow                  14
  #define white                   15


  extern int      aktxp;                    // Beinhaltet die aktuelle Position des Textcursors in X-Achse
  extern int      aktyp;                    // dto. fuer die Y-Achse
  extern uint16_t textcolor;                // Beinhaltet die Farbwahl fuer die Vordergrundfarbe
  extern uint16_t bkcolor;                  // dto. fuer die Hintergrundfarbe
  extern uint8_t  outmode;                  // Variable zum "Drehen" der Displayausgabe
  extern uint8_t  textsize;                 // Skalierung der Ausgabeschriftgroesse

  const extern uint16_t egapalette [];      // RGB565 Farbwerte der EGA-Palette

  //-------------------------------------------------------------
  //  Schriftzeichen
  //-------------------------------------------------------------

  #define fontsizex   8
  #define fontsizey   8

  static const unsigned char font8x8[][8]  =
  {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},       // Ascii 32 = ' '
    {0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00},       // Ascii 33 = '!'
    {0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00},       // Ascii 34 = '"'
    {0x6c,0x6c,0xfe,0x6c,0xfe,0x6c,0x6c,0x00},       // Ascii 35 = '#'
    {0x18,0x3e,0x58,0x3c,0x1a,0x7c,0x18,0x00},       // Ascii 36 = '$'
    {0x00,0x63,0x66,0x0c,0x18,0x33,0x63,0x00},       // Ascii 37 = '%'
    {0x1c,0x36,0x1c,0x3b,0x6e,0x66,0x3b,0x00},       // Ascii 38 = '&'
    {0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00},       // Ascii 39 = '''
    {0x0c,0x18,0x30,0x30,0x30,0x18,0x0c,0x00},       // Ascii 40 = '('
    {0x30,0x18,0x0c,0x0c,0x0c,0x18,0x30,0x00},       // Ascii 41 = ')'
    {0x00,0x66,0x3c,0xff,0x3c,0x66,0x00,0x00},       // Ascii 42 = '*'
    {0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00},       // Ascii 43 = '+'
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00},       // Ascii 44 = ','
    {0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00},       // Ascii 45 = '-'
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00},       // Ascii 46 = '.'
    {0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00},       // Ascii 47 = '/'
    {0x7c,0xc6,0xce,0xd6,0xe6,0xc6,0x7c,0x00},       // Ascii 48 = '0'
    {0x18,0x38,0x18,0x18,0x18,0x18,0x18,0x00},       // Ascii 49 = '1'
    {0x3c,0x66,0x06,0x0c,0x18,0x30,0x7e,0x00},       // Ascii 50 = '2'
    {0x3c,0x66,0x06,0x1c,0x06,0x66,0x3c,0x00},       // Ascii 51 = '3'
    {0x1c,0x3c,0x6c,0xcc,0xfe,0x0c,0x0c,0x00},       // Ascii 52 = '4'
    {0x7e,0x60,0x7c,0x06,0x06,0x66,0x3c,0x00},       // Ascii 53 = '5'
    {0x3c,0x66,0x60,0x7c,0x66,0x66,0x3c,0x00},       // Ascii 54 = '6'
    {0x7e,0x06,0x06,0x0c,0x18,0x18,0x18,0x00},       // Ascii 55 = '7'
    {0x3c,0x66,0x66,0x3c,0x66,0x66,0x3c,0x00},       // Ascii 56 = '8'
    {0x3c,0x66,0x66,0x3e,0x0c,0x18,0x30,0x00},       // Ascii 57 = '9'
    {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00},       // Ascii 58 = ':'
    {0x30,0x00,0x18,0x18,0x00,0x18,0x18,0x00},       // Ascii 59 = ';'
    {0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x00},       // Ascii 60 = '<'
    {0x00,0x00,0x7e,0x00,0x00,0x7e,0x00,0x00},       // Ascii 61 = '='
    {0x60,0x30,0x18,0x0c,0x18,0x30,0x60,0x00},       // Ascii 62 = '>'
    {0x3c,0x66,0x06,0x0c,0x18,0x00,0x18,0x00},       // Ascii 63 = '?'
    {0x7c,0xc6,0xde,0xde,0xde,0xc0,0x7c,0x00},       // Ascii 64 = '@'
    {0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0x00},       // Ascii 65 = 'A'
    {0xfc,0xc6,0xc6,0xfc,0xc6,0xc6,0xfc,0x00},       // Ascii 66 = 'B'
    {0x3c,0x66,0xc0,0xc0,0xc0,0x66,0x3c,0x00},       // Ascii 67 = 'C'
    {0xf8,0xcc,0xc6,0xc6,0xc6,0xcc,0xf8,0x00},       // Ascii 68 = 'D'
    {0xfe,0xc0,0xc0,0xf8,0xc0,0xc0,0xfe,0x00},       // Ascii 69 = 'E'
    {0xfe,0xc0,0xc0,0xf8,0xc0,0xc0,0xc0,0x00},       // Ascii 70 = 'F'
    {0x3c,0x66,0xc0,0xc0,0xce,0x66,0x3e,0x00},       // Ascii 71 = 'G'
    {0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0x00},       // Ascii 72 = 'H'
    {0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00},       // Ascii 73 = 'I'
    {0x06,0x06,0x06,0x06,0xc6,0xc6,0x7c,0x00},       // Ascii 74 = 'J'
    {0xf6,0xcc,0xd8,0xf0,0xd8,0xcc,0xc6,0x00},       // Ascii 75 = 'K'
    {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xfe,0x00},       // Ascii 76 = 'L'
    {0xc6,0xee,0xfe,0xd6,0xc6,0xc6,0xc6,0x00},       // Ascii 77 = 'M'
    {0xc6,0xe6,0xf6,0xde,0xce,0xc6,0xc6,0x00},       // Ascii 78 = 'N'
    {0x38,0x6c,0xc6,0xc6,0xc6,0x6c,0x38,0x00},       // Ascii 79 = 'O'
    {0xfc,0xc6,0xc6,0xfc,0xc0,0xc0,0xc0,0x00},       // Ascii 80 = 'P'
    {0x38,0x6c,0xc6,0xc6,0xda,0x6c,0x36,0x00},       // Ascii 81 = 'Q'
    {0xfc,0xc6,0xc6,0xfc,0xcc,0xc6,0xc6,0x00},       // Ascii 82 = 'R'
    {0x7c,0xc6,0xc0,0x7c,0x06,0xc6,0x7c,0x00},       // Ascii 83 = 'S'
    {0xfc,0x30,0x30,0x30,0x30,0x30,0x30,0x00},       // Ascii 84 = 'T'
    {0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00},       // Ascii 85 = 'U'
    {0xc6,0xc6,0xc6,0xc6,0xc6,0x6c,0x38,0x00},       // Ascii 86 = 'V'
    {0xc6,0xc6,0xc6,0xd6,0xfe,0xee,0xc6,0x00},       // Ascii 87 = 'W'
    {0xc6,0xc6,0x6c,0x38,0x6c,0xc6,0xc6,0x00},       // Ascii 88 = 'X'
    {0x66,0x66,0x66,0x3c,0x18,0x18,0x18,0x00},       // Ascii 89 = 'Y'
    {0xfe,0x06,0x0c,0x18,0x30,0x60,0xfe,0x00},       // Ascii 90 = 'Z'
    {0x3c,0x30,0x30,0x30,0x30,0x30,0x3c,0x00},       // Ascii 91 = '['
    {0xc0,0x60,0x30,0x18,0x0c,0x06,0x02,0x00},       // Ascii 92 = '\'
    {0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x00},       // Ascii 93 = ']'
    {0x08,0x1c,0x36,0x63,0x00,0x00,0x00,0x00},       // Ascii 94 = '^'
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff},       // Ascii 95 = '_'
    {0x30,0x18,0x0c,0x00,0x00,0x00,0x00,0x00},       // Ascii 96 = '`'
    {0x00,0x00,0x7c,0x06,0x7e,0xc6,0x7e,0x00},       // Ascii 97 = 'a'
    {0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xfc,0x00},       // Ascii 98 = 'b'
    {0x00,0x00,0x7c,0xc6,0xc0,0xc6,0x7c,0x00},       // Ascii 99 = 'c'
    {0x06,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00},       // Ascii 100 = 'd'
    {0x00,0x00,0x7c,0xc6,0xfe,0xc0,0x7c,0x00},       // Ascii 101 = 'e'
    {0x3c,0x66,0x60,0xf8,0x60,0x60,0x60,0x00},       // Ascii 102 = 'f'
    {0x00,0x00,0x7e,0xc6,0xc6,0x7e,0x06,0xfc},       // Ascii 103 = 'g'
    {0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0x00},       // Ascii 104 = 'h'
    {0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00},       // Ascii 105 = 'i'
    {0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0xcc,0x78},       // Ascii 106 = 'j'
    {0xc0,0xc0,0xc6,0xcc,0xf8,0xcc,0xc6,0x00},       // Ascii 107 = 'k'
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00},       // Ascii 108 = 'l'
    {0x00,0x00,0x6c,0xfe,0xd6,0xc6,0xc6,0x00},       // Ascii 109 = 'm'
    {0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xc6,0x00},       // Ascii 110 = 'n'
    {0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x7c,0x00},       // Ascii 111 = 'o'
    {0x00,0x00,0xfc,0xc6,0xc6,0xfc,0xc0,0xc0},       // Ascii 112 = 'p'
    {0x00,0x00,0x7e,0xc6,0xc6,0x7e,0x06,0x06},       // Ascii 113 = 'q'
    {0x00,0x00,0xfc,0xc6,0xc0,0xc0,0xc0,0x00},       // Ascii 114 = 'r'
    {0x00,0x00,0x7c,0xc0,0x7c,0x06,0xfc,0x00},       // Ascii 115 = 's'
    {0x60,0x60,0xfc,0x60,0x60,0x66,0x3c,0x00},       // Ascii 116 = 't'
    {0x00,0x00,0xc6,0xc6,0xc6,0xc6,0x7e,0x00},       // Ascii 117 = 'u'
    {0x00,0x00,0xc6,0xc6,0xc6,0x6c,0x38,0x00},       // Ascii 118 = 'v'
    {0x00,0x00,0xc6,0xc6,0xd6,0xfe,0x6c,0x00},       // Ascii 119 = 'w'
    {0x00,0x00,0xc6,0x6c,0x38,0x6c,0xc6,0x00},       // Ascii 120 = 'x'
    {0x00,0x00,0xc6,0xc6,0xc6,0x7e,0x06,0xfc},       // Ascii 121 = 'y'
    {0x00,0x00,0x7e,0x0c,0x18,0x30,0x7e,0x00},       // Ascii 122 = 'z'
    {0x0e,0x18,0x18,0x70,0x18,0x18,0x0e,0x00},       // Ascii 123 = '{'
    {0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00},       // Ascii 124 = '|'
    {0x70,0x18,0x18,0x0e,0x18,0x18,0x70,0x00},       // Ascii 125 = '}'
    {0x32,0x4c,0x00,0x00,0x00,0x00,0x00,0x00},       // Ascii 126 = '~'
    {0x00,0x18,0x3c,0x66,0xc3,0xc3,0xff,0x00},       // Ascii 127 = ' '

    {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},      // 0x80     ausgefuelltes Quadrat
    {0x70,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00},      // 0x81     Grad Celcius Zeichen
    {0x38,0x44,0x82,0x44,0x28,0xaa,0xee,0x00}       // 0x82     Ohm - Zeichen
  };

  //-------------------------------------------------------------
  //  Displayinitialisierung
  //-------------------------------------------------------------

  #define delay_flag 0x80                              // Markierungsflag: bestimmt, ob nach einem Kommando

  #if ( (s6d02a1 == 1) || (ili9163 == 1) )

    static const uint8_t lcdinit_seq[] =                 // Initialisierungssequenzen
    {
      29,                                                // Anzahl Gesamtkommandos

    /*
      Byte 0 | Byte 1       | Byte 2 u. folgende | evtl. Delaytime-Byte
      CMD    | Anzahl Datas | Datas | evtl. Delaytime
    */

      0xf0, 2,0x5a,0x5a,
      0xfc, 2,0x5a,0x5a,                                                                   // Excommand3
      0x26, 1,0x01,                                                                        // Gammaset
      0xfa, 15,0x02,0x1f,0x00,0x10,0x22,0x30,0x38,0x3A,0x3A,0x3A,0x3A,0x3A,0x3d,0x02,0x01, // Positivegammacontrol
      0xfb, 15,0x21,0x00,0x02,0x04,0x07,0x0a,0x0b,0x0c,0x0c,0x16,0x1e,0x30,0x3f,0x01,0x02, // Negativegammacontrol
      0xfd, 11,0x00,0x00,0x00,0x17,0x10,0x00,0x01,0x01,0x00,0x1f,0x1f,                     // Analogparametercontrol
      0xf4, 15,0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00, // Powercontrol
      0xf5, 13,0x00,0x70,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x66,0x06,           // VCOMcontrol
      0xf6, 11,0x02,0x00,0x3f,0x00,0x00,0x00,0x02,0x00,0x06,0x01,0x00,                     // Sourcecontrol
                                                                                           // Displaycontrol
      0xf2, 17,0x00,0x01,0x03,0x08,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x04,0x08,0x08,
      0xf8, 1, 0x11,                                                                       // Gatecontrol
      0xf7, 4,0xc8,0x20,0x00,0x00,                                                         //Interfacecontrol
      0xf3, 2,0x00,0x00,                                                                   //Powersequencecontrol
      0x11, delay_flag,50,                                                                 //Wake
      0xf3, 2+delay_flag,0x00,0x01,50,                                                     //Powersequencecontrol
      0xf3, 2+delay_flag,0x00,0x03,50,
      0xf3, 2+delay_flag,0x00,0x07,50,
      0xf3, 2+delay_flag,0x00,0x0f,50,
      0xf4, 15+delay_flag,0x00,0x04,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00,50,
      0xf3, 2+delay_flag,0x00,0x1f,50,
      0xf3, 2+delay_flag,0x00,0x7f,50,
      0xf3, 2+delay_flag,0x00,0xff,50,
      0xfd, 11,0x00,0x00,0x00,0x17,0x10,0x00,0x00,0x01,0x00,0x16,0x16,                     // Analogparametercontrol
      0xf4, 15,0x00,0x09,0x00,0x00,0x00,0x3f,0x3f,0x07,0x00,0x3C,0x36,0x00,0x3C,0x36,0x00,
      0x36, 1,0x08,                                                                        //Memoryaccessdatacontrol
      0x35, 1,0x00,                                                                        //Tearingeffectlineon
      0x3a, 1+delay_flag,0x05,150,                                                         //Interfacepixelcontrol

      0x29,0,                                                                              //Displayon
      0x2c,0                                                                               //Memorywrite
    };
  #endif

  #if (st7735r == 1)

    static const uint8_t lcdinit_seq[] =                    // Initialisierungssequenzen
    {
        21,                                                 // Anzahl Gesamtkommandos

        0x01, delay_flag,150,
        0x11, delay_flag,255,
        0xb1, 3, 0x01, 0x2C, 0x2D,
        0xb2, 3, 0x01, 0x2C, 0x2D,
        0xb3, 6, 0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D,
        0xb4, 1, 0x07,
        0xc0, 3, 0xA2, 0x02, 0x84,
        0xc1, 1, 0xC5,
        0xc2, 2, 0x0A, 0x00,
        0xc3, 2, 0x8A, 0x2A,
        0xc4, 2, 0x8A, 0xEE,
        0xc5, 1, 0x0E,
        0x20, 0,

        #if ( rgbseq == 0 )
          0x36, 1, 0xc0,                                      // 00 fuer auf dem Kopf stehend
                                                              // C0 fuer Normal, BGR Farbfolge
                                                              // C8 fuer Normal, RGB Farbfolge
        #endif

        #if ( rgbseq == 1 )
          0x36, 1, 0xc8,                                      // 00 fuer auf dem Kopf stehend
                                                              // C0 fuer Normal, BGR Farbfolge
                                                              // C8 fuer Normal, RGB Farbfolge
        #endif

        0x3a, 1+delay_flag, 0x05,10,

        0x2a, 4, 0x00, 0x00, 0x00, 0x7F,
        0x2b, 4, 0x00, 0x00, 0x00, 0x9F,

        0xe0, 16, 0x02, 0x1c, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2d,
                  0x29, 0x25, 0x2B, 0x39, 0x00, 0x01, 0x03, 0x10,
        0xe1, 16, 0x03, 0x1d, 0x07, 0x06, 0x2E, 0x2C, 0x29, 0x2D,
                  0x2E, 0x2E, 0x37, 0x3F, 0x00, 0x00, 0x02, 0x10,
        0x13, delay_flag,10,
        0x29, delay_flag,100,
    };
  #endif


  #if (ili9340 == 1)
    static const uint8_t lcdinit_seq[] =                    // Initialisierungssequenzen
    {
      22,
                                                     // Anzahl Gesamtkommandos
    //
    //  Byte 0 | Byte 1       | Byte 2 u. folgende | evtl. Delaytime-Byte
    //  CMD    | Anzahl Datas | Datas | evtl. Delaytime
    //


      0x01,     delay_flag, 200,
      0xcb, 5,  0x39, 0x2c, 0x00, 0x34, 0x02,
      0xcf, 3,  0x00, 0xc1, 0x30,
      0xe8, 3,  0x85, 0x00, 0x78,
      0xea, 2,  0x00, 0x00,
      0xed, 4,  0x64, 0x03, 0x12, 0x81,
      0xf7, 1,  0x20,
      0xc0, 1,  0x23,                                // power control => VRH[5:0]
      0xc1, 1,  0x10,                                // power control => SAP[2:0]; BT[3:0]
      0xc5, 2,  0x3e, 0x28,                          // VCM control
      0xc7, 1,  0x86,                                // VCM control2
      0x36, 1,  0x48,                                // memory access controll
      0x3a, 1,  0x55,
      0xb1, 2,  0x00, 0x18,
      0xb6, 3,  0x08, 0x82, 0x27,                    // display control
      0xf2, 1,  0x00,                                // gamma function
      0x26, 1,  0x01,                                // gamma curve selected

      // set gama
      0xe0, 15, 0x0f, 0x31, 0x2b, 0x0c, 0x0e, 0x08, 0x4e, 0xf1, 0x37, 0x07, 0x10, 0x03, 0x0e, 0x09, 0x00,
      0xe1, 15, 0x00, 0x0e, 0x14, 0x03, 0x11, 0x07, 0x31, 0xc1, 0x48, 0x08, 0x0f, 0x0c, 0x31, 0x36, 0x0f,

      0x11,     delay_flag, 130,
      0x29,     delay_flag, 10,
      0x2c,     delay_flag, 10
    };
  #endif

  #if (ili9225 == 1)
    static const uint8_t lcdinit_seq[] =                    // Initialisierungssequenzen
    {
      34,                                                // Anzahl Gesamtkommandos

    /*
      Byte 0 | Byte 1       | Byte 2 u. folgende | evtl. Delaytime-Byte
      CMD    | Anzahl Datas | Datas | evtl. Delaytime
    */

      0x01, 2+delay_flag, 0x01,0x1c,50,
      0x02, 2, 0x01,0x00,
      0x03, 2, 0x10,0x38,
      0x08, 2, 0x08,0x08,

      0x0c, 2, 0x00,0x00,
      0x0f, 2, 0x0e,0x01,
      0x20, 2, 0x00,0x00,
      0x21, 2+delay_flag, 0x00,0x00,50,

      	//power ON sequence
      0x10, 2, 0x09,0x00,
      0x11, 2+delay_flag,0x10,0x38,50,

      0x12, 2, 0x11,0x21,
      0x13, 2, 0x00,0x65,
      0x14, 2, 0x50,0x58,

   	//set GRAM area
      0x30, 2, 0x00,0x00,
      0x31, 2, 0x00,0xdb,
      0x32, 2, 0x00,0x00,
      0x33, 2, 0x00,0x00,
      0x34, 2, 0x00,0xdb,
      0x35, 2, 0x00,0x00,
      0x36, 2, 0x00,0xaf,
      0x37, 2, 0x00,0x00,
      0x38, 2, 0x00,0xdb,
      0x39, 2, 0x00,0x00,

   	//adjust the gamma curve
      0x50, 2, 0x04,0x00,
      0x51, 2, 0x06,0x0b,
      0x52, 2, 0x0c,0x0a,
      0x53, 2, 0x01,0x05,
      0x54, 2, 0x0a,0x0c,
      0x55, 2, 0x0b,0x06,
      0x56, 2, 0x00,0x04,
      0x57, 2, 0x05,0x01,
      0x58, 2, 0x0e,0x00,
      0x59, 2+delay_flag, 0x00,0x0e,50,

      0x07, 2,0x10,0x17

    };
  #endif

#endif
